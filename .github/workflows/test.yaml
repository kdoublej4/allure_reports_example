name: Test  # Название workflow, отображаемое в интерфейсе GitHub Actions

on: [push]  # Триггер, запускающий workflow при каждом пуше в репозиторий

jobs:
  test:
    runs-on: ubuntu-latest  # Где запускаем: виртуальная машина с последней версией Ubuntu
    steps:  # Что делаем: последовательные шаги, выполняемые в рамках job
      - uses: actions/checkout@v4  # Выкачиваем код репозитория в рабочую директорию CI
      - uses: actions/setup-java@v4  # Настраиваем окружение Java
        with:
          distribution: 'oracle'  # Указываем поставщика JDK (Oracle)
          java-version: '17'  # Указываем версию JDK (Java 17)
      - uses: Xotabu4/selenoid-github-action@v2  # Используем Selenoid для запуска браузерных тестов
      - run: ./gradlew clean test -Dselenide.remote=http://localhost:4444/wd/hub  # Запуск тестов через Gradle, используя удаленный браузер Selenoid

#        # Скачиваем историю тестов
#      - uses: actions/checkout@v2  # Снова выкачиваем репозиторий, но уже для работы с веткой gh-pages
#        if: always()  # Выполняем этот шаг всегда, даже если предыдущие шаги завершились ошибкой
#        continue-on-error: true  # Продолжаем выполнение, даже если произошла ошибка
#        with:
#          ref: gh-pages  # Указываем, что работаем с веткой gh-pages
#          path: gh-pages  # Клонируем содержимое ветки gh-pages в локальную директорию 'gh-pages'
#
#        # Генерируем отчет
#      - uses: ./allure-report-action  # Используем локальный экшен для генерации Allure отчета
#        if: always()  # Выполняем этот шаг всегда, даже если предыдущие шаги завершились ошибкой
#        with:
#          allure_results: build/allure-results  # Путь к результатам тестов (Allure)
#          gh_pages: gh-pages  # Путь к локальной директории, содержащей данные ветки gh-pages
#          allure_report: allure-report  # Путь к директории, куда будет сохранен сгенерированный Allure отчет
#          allure_history: allure-history  # Путь к директории с историей отчетов Allure
#
#        # Публикуем отчет
#      - uses: peaceiris/actions-gh-pages@v2  # Публикуем сгенерированный Allure отчет на GitHub Pages
#        if: always()  # Выполняем этот шаг всегда, даже если предыдущие шаги завершились ошибкой
#        env:
#          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Используем GitHub токен для авторизации и пуша в ветку gh-pages
#          PUBLISH_BRANCH: gh-pages  # Указываем ветку для публикации отчета (gh-pages)
#          PUBLISH_DIR: allure-history  # Указываем директорию, содержимое которой будет опубликовано на GitHub Pages


